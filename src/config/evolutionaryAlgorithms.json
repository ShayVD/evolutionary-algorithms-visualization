[
  {
    "id": "ga",
    "name": "Genetic Algorithm",
    "description": "A search heuristic inspired by the process of natural selection that belongs to the class of evolutionary algorithms.",
    "keyFeatures": [
      "Based on natural selection principles",
      "Uses crossover and mutation operators",
      "Suitable for both continuous and discrete problems",
      "Easy to implement and understand"
    ],
    "defaultParameters": {
      "populationSize": 50,
      "maxGenerations": 100,
      "crossoverRate": 0.8,
      "mutationRate": 0.1,
      "selectionMethod": "tournament",
      "tournamentSize": 3,
      "elitism": 1
    },
    "parameterMetadata": {
      "crossoverRate": {
        "label": "Crossover Rate",
        "type": "slider",
        "min": 0,
        "max": 1,
        "step": 0.01,
        "helperText": "Probability of crossover between individuals",
        "decimals": 2
      },
      "mutationRate": {
        "label": "Mutation Rate",
        "type": "slider",
        "min": 0,
        "max": 1,
        "step": 0.01,
        "helperText": "Probability of mutation for each gene",
        "decimals": 2
      },
      "selectionMethod": {
        "label": "Selection Method",
        "type": "select",
        "options": [
          { "value": "tournament", "label": "Tournament" },
          { "value": "roulette", "label": "Roulette Wheel" },
          { "value": "rank", "label": "Rank" }
        ],
        "helperText": "How individuals are selected for reproduction"
      },
      "tournamentSize": {
        "label": "Tournament Size",
        "type": "number",
        "min": 2,
        "max": 10,
        "helperText": "Number of individuals in each tournament",
        "condition": "selectionMethod === 'tournament'"
      },
      "elitism": {
        "label": "Elitism",
        "type": "number",
        "min": 0,
        "max": 10,
        "helperText": "Number of best individuals to preserve in each generation"
      }
    },
    "constraints": {
      "fixedPopulationSize": null,
      "populationSizeHelperText": null
    },
    "icon": "üß¨",
    "filePath": "./implementations/GeneticAlgorithm"
  },
  {
    "id": "es",
    "name": "Evolution Strategy",
    "description": "An optimization technique based on ideas of adaptation and evolution, particularly suitable for continuous parameter optimization.",
    "keyFeatures": [
      "Self-adaptive mutation parameters",
      "Used for real-valued optimization problems",
      "Supports (Œº,Œª) and (Œº+Œª) selection strategies",
      "Handles constraints effectively"
    ],
    "defaultParameters": {
      "populationSize": 30,
      "maxGenerations": 100,
      "mu": 10,
      "lambda": 20,
      "selectionType": "plus",
      "initialStepSize": 1.0
    },
    "parameterMetadata": {
      "mu": {
        "label": "Œº (Parent Population)",
        "type": "number",
        "min": 1,
        "max": 100,
        "helperText": "Number of parents in each generation"
      },
      "lambda": {
        "label": "Œª (Offspring Population)",
        "type": "number",
        "min": 1,
        "max": 200,
        "helperText": "Number of offspring in each generation"
      },
      "selectionType": {
        "label": "Selection Type",
        "type": "select",
        "options": [
          { "value": "plus", "label": "(Œº+Œª) Selection" },
          { "value": "comma", "label": "(Œº,Œª) Selection" }
        ],
        "helperText": "How the next generation is selected"
      },
      "initialStepSize": {
        "label": "Initial Step Size",
        "type": "slider",
        "min": 0.1,
        "max": 5,
        "step": 0.1,
        "helperText": "Initial mutation step size",
        "decimals": 2
      }
    },
    "constraints": {
      "fixedPopulationSize": null,
      "populationSizeHelperText": null
    },
    "icon": "üîÑ",
    "filePath": "./implementations/EvolutionStrategy"
  },
  {
    "id": "de",
    "name": "Differential Evolution",
    "description": "A stochastic population-based optimization algorithm that is well-suited to continuous optimization problems.",
    "keyFeatures": [
      "Simple but powerful global optimization algorithm", 
      "Few control parameters",
      "Fast convergence",
      "Works well on multimodal, non-differentiable, and noisy functions"
    ],
    "defaultParameters": {
      "populationSize": 50,
      "maxGenerations": 100,
      "scalingFactor": 0.5,
      "crossoverRate": 0.7,
      "strategy": "rand/1/bin"
    },
    "parameterMetadata": {
      "scalingFactor": {
        "label": "Scaling Factor (F)",
        "type": "slider",
        "min": 0.1,
        "max": 1.0,
        "step": 0.05,
        "helperText": "Controls the amplification of differential variation",
        "decimals": 2
      },
      "crossoverRate": {
        "label": "Crossover Rate (CR)",
        "type": "slider",
        "min": 0,
        "max": 1,
        "step": 0.01,
        "helperText": "Probability of crossover for each dimension",
        "decimals": 2
      },
      "strategy": {
        "label": "DE Strategy",
        "type": "select",
        "options": [
          { "value": "rand/1/bin", "label": "rand/1/bin" },
          { "value": "best/1/bin", "label": "best/1/bin" },
          { "value": "rand/2/bin", "label": "rand/2/bin" },
          { "value": "best/2/bin", "label": "best/2/bin" }
        ],
        "helperText": "Strategy for mutation and crossover"
      }
    },
    "constraints": {
      "fixedPopulationSize": null,
      "populationSizeHelperText": null
    },
    "icon": "‚ö°",
    "filePath": "./implementations/DifferentialEvolution"
  },
  {
    "id": "pso",
    "name": "Particle Swarm Optimization",
    "description": "A computational method that optimizes a problem by iteratively trying to improve candidate solutions based on particle movement.",
    "keyFeatures": [
      "Inspired by social behavior of bird flocking or fish schooling",
      "Particles move in solution space guided by personal and global best",
      "Simple implementation with few parameters",
      "Effective for continuous optimization problems"
    ],
    "defaultParameters": {
      "populationSize": 40,
      "maxGenerations": 100,
      "inertiaWeight": 0.72,
      "cognitiveCoefficient": 1.49,
      "socialCoefficient": 1.49,
      "maxVelocity": 4.0
    },
    "parameterMetadata": {
      "inertiaWeight": {
        "label": "Inertia Weight",
        "type": "slider",
        "min": 0.1,
        "max": 1.0,
        "step": 0.01,
        "helperText": "Controls influence of previous velocity",
        "decimals": 2
      },
      "cognitiveCoefficient": {
        "label": "Cognitive Coefficient",
        "type": "slider",
        "min": 0.1,
        "max": 2.5,
        "step": 0.01,
        "helperText": "Controls attraction to particle's personal best",
        "decimals": 2
      },
      "socialCoefficient": {
        "label": "Social Coefficient",
        "type": "slider",
        "min": 0.1,
        "max": 2.5,
        "step": 0.01,
        "helperText": "Controls attraction to global best",
        "decimals": 2
      },
      "maxVelocity": {
        "label": "Maximum Velocity",
        "type": "number",
        "min": 0.1,
        "max": 10,
        "step": 0.1,
        "helperText": "Maximum velocity limit for particles"
      }
    },
    "constraints": {
      "fixedPopulationSize": null,
      "populationSizeHelperText": null
    },
    "icon": "üê¶",
    "filePath": "./implementations/ParticleSwarmOptimization"
  },
  {
    "id": "abc",
    "name": "Artificial Bee Colony",
    "description": "A swarm-based metaheuristic algorithm inspired by the foraging behavior of honey bees, consisting of employed bees, onlooker bees, and scout bees.",
    "keyFeatures": [
      "Inspired by the intelligent foraging behavior of honey bees",
      "Balances exploration and exploitation effectively",
      "Self-organizing and decentralized system",
      "Robust for multimodal and complex optimization problems"
    ],
    "defaultParameters": {
      "populationSize": 40,
      "maxGenerations": 100,
      "limit": 20,
      "scalingFactor": 0.5
    },
    "parameterMetadata": {
      "limit": {
        "label": "Abandonment Limit",
        "type": "number",
        "min": 1,
        "max": 100,
        "helperText": "Max trials before abandoning a food source"
      },
      "scalingFactor": {
        "label": "Scaling Factor",
        "type": "slider",
        "min": 0.1,
        "max": 1.0,
        "step": 0.05,
        "helperText": "Controls neighborhood search size",
        "decimals": 2
      }
    },
    "constraints": {
      "fixedPopulationSize": null,
      "populationSizeHelperText": null
    },
    "icon": "üêù",
    "filePath": "./implementations/ArtificialBeeColony"
  },
  {
    "id": "sa",
    "name": "Simulated Annealing",
    "description": "A probabilistic technique for approximating the global optimum, inspired by the annealing process in metallurgy.",
    "keyFeatures": [
      "Can escape local optima through probabilistic acceptance of worse solutions",
      "Gradually decreases exploration in favor of exploitation",
      "Simple to implement with few parameters",
      "Effective for complex, multimodal landscapes"
    ],
    "defaultParameters": {
      "populationSize": 1,
      "maxGenerations": 1000,
      "initialTemperature": 100.0,
      "coolingRate": 0.95,
      "neighborhoodSize": 0.1,
      "minTemperature": 0.01
    },
    "parameterMetadata": {
      "initialTemperature": {
        "label": "Initial Temperature",
        "type": "number",
        "min": 1,
        "max": 1000,
        "helperText": "Starting temperature (higher allows more exploration)"
      },
      "coolingRate": {
        "label": "Cooling Rate",
        "type": "slider",
        "min": 0.8,
        "max": 0.99,
        "step": 0.01,
        "helperText": "Rate at which temperature decreases (higher = slower cooling)",
        "decimals": 2
      },
      "neighborhoodSize": {
        "label": "Neighborhood Size",
        "type": "slider",
        "min": 0.01,
        "max": 0.5,
        "step": 0.01,
        "helperText": "Size of neighborhood for generating neighboring solutions",
        "decimals": 2
      },
      "minTemperature": {
        "label": "Minimum Temperature",
        "type": "number",
        "min": 0.001,
        "max": 10,
        "step": 0.001,
        "helperText": "Temperature at which the algorithm stops"
      }
    },
    "constraints": {
      "fixedPopulationSize": 1,
      "populationSizeHelperText": "Simulated Annealing always uses a population size of 1"
    },
    "icon": "üî•",
    "filePath": "./implementations/SimulatedAnnealing"
  }
] 